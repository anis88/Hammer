@charset "UTF-8";
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * Thank you for choosing inuit.css. May your floats remain cleared.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............ You’re reading it!
 * WARNING............. Here be dragons!
 * IMPORTS............. Begin importing the sections below
 *
 * MIXINS.............. Super-simple Sass stuff
 * NORMALIZE........... normalize.css
 * RESET............... Set some defaults
 * CLEARFIX............
 *
 * MAIN................ High-level elements like `html`, `body`, etc.
 * HEADINGS............ Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT.......... Smaller text elements like `small`
 * QUOTES..............
 * LINKS...............
 * LISTS...............
 * IMAGES..............
 * FORMS...............
 *
 * GRIDS............... Fluid, proportional and nestable grids
 * NAV................. A simple abstraction to put a list in horizontal nav mode
 * OPTIONS............. Grouped nav items
 * MEDIA............... Media object
 * ISLAND.............. Boxed off content
 * SPLIT............... A simple split-in-two object
 * THIS-OR-THIS........ Options object
 * FLYOUT.............. Flyout-on-hover object
 * ARROWS.............. CSS arrows
 * ICONS............... Icon fonts
 * BUTTONS.............
 * LOZENGES............ Basic lozenge styles
 * RULES............... Horizontal rules
 * STATS............... Simple stats object
 *
 * WIDTHS.............. Width classes for use alongside the grid system etc.
 * HELPER.............. A series of helper classes to use arbitrarily
 */
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Set up project-specific variables here which are then used throughout your
 * build. These variables are automatically picked up by inuit.css so you should
 * never need to modify any framework code.
 */
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/**
 * Would you like to use Adam Whitcroft’s Batch icon font, as per:
 * adamwhitcroft.com/batch ?
 */
/**
 * Base stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: $responsive parameter above must be enabled before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/**
 * Brand stuff
 */
/**
 * inuit.css will work these next ones out for you.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/* normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we…?
*/
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
a, u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .gw:after,
.grid-wrapper:after, .media:after, .island:after,
.islet:after, .stat-group:after {
  content: "";
  display: table;
  clear: both;
}

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font: 1em/1.5 serif;
  overflow-y: scroll;
  min-height: 100%;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333;
}

h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6;
}

h3, .gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1;
}

h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
}

h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
}

h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
}

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 *
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 *
 */
hgroup .hN {
  margin-bottom: 0;
}

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.giga {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1;
}

.mega {
  font-size: 72px;
  font-size: 4.5rem;
  line-height: 1;
}

.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333;
}

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
.smallprint,
.milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
}

.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4;
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
q {
  quotes: "‘" "’" "“" "”";
}
q:before {
  content: "‘";
  content: open-quote;
}
q:after {
  content: "’";
  content: close-quote;
}
q q:before {
  content: "“";
  content: open-quote;
}
q q:after {
  content: "”";
  content: close-quote;
}

blockquote {
  quotes: "“" "”";
}
blockquote p:before {
  content: "“";
  content: open-quote;
}
blockquote p:after {
  content: "";
  content: no-close-quote;
}
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}
blockquote q:before {
  content: "‘";
  content: open-quote;
}
blockquote q:after {
  content: "’";
  content: close-quote;
}

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening “ that we wish to hang.
   */
  text-indent: -0.41em;
}
blockquote p:last-of-type {
  margin-bottom: 0;
}

.source {
  display: block;
  text-indent: 0;
}
.source:before {
  content: "—";
}

/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/**
 * Say no to negative hovers, as per: csswizardry.com/2011/05/on-negative-hovers
 *
 * Sometimes, particularly on larger projects, it is useful to scope link
 * styling only to anchors which have `href` attributes.
 */
a {
  /**
   * Set colors etc in your theme stylesheet.
   */
}
a:hover, a:active, a:focus {
  text-decoration: underline;
}

/**
 * ‘Current’ states, e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li class=current><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.current > a {
  cursor: text;
  text-decoration: underline;
}

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
img {
  max-width: 100%;
}

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width],
img[height] {
  max-width: none;
}

/**
 * Image placement variations.
 */
.img--right {
  float: right;
  margin-bottom: 24px;
  margin-left: 24px;
}

.img--left {
  float: left;
  margin-right: 24px;
  margin-bottom: 24px;
}

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 24px;
  margin-left: auto;
}

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
.img--short {
  height: 120px;
}

.img--medium {
  height: 240px;
}

.img--tall {
  height: 360px;
}

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block;
}

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol {
  margin-bottom: 0;
}

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal;
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */
fieldset {
  padding: 24px;
}

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */
.text-input,
textarea {
  /**
   * Style these via your theme stylesheet.
   */
}

/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */
.form-fields {
  list-style: none;
  margin: 0;
}

.form-fields > li:last-child {
  margin-bottom: 0;
}

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
label,
.label {
  display: block;
}

/**
 * Extra help text in `label`s, e.g.:
 *
   <label>Card number <small class=additional>No spaces</small></label>
 *
 */
.additional {
  display: block;
  font-weight: normal;
}

/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
.check-list {
  list-style: none;
  margin: 0;
}

/*
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block;
}

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form label {
  display: inline-block;
  font: inherit;
}

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 *
 */
/*small*/
.extra-help {
  display: inline-block;
  visibility: hidden;
}

.text-input:active + .extra-help,
.text-input:focus + .extra-help {
  visibility: visible;
}

/**
 * Objects and abstractions
 *
 * Single-line comment (//) out any objects you do not need in your project.
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class=gw>

       <div class="g  one-third">
           <p>One third grid</p>
       </div>

       <div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div>

       <div class="g  one-half">
           <p>One half grid</p>
       </div>

       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>

       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 *
 * Shorthand and verbose
 */
.gw,
.grid-wrapper {
  /**
  * The following declarations allow us to use the `.gw` class on lists.
  */
  list-style: none;
  margin-bottom: 0;
}

/**
 * Reverse grid order
 *
  <div class="gw  gw--rev">

    <div class="g  one-third">
      <p>Appears on the right</p>
    </div>

    <div class="g  two-thirds">
      <p>Appears on the left</p>
    </div>

  </div>
 *
 */
.gw--rev > .g,
.grid-wrapper--rev > .grid {
  float: right;
}

/**
  * Grid
  *
  * Shorthand and verbose
*/
.g,
.grid {
  float: left;
  padding-left: 24px;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
  <ul class=nav>
    <a href=# class=nav-item>Home</a>
    <a href=# class=nav-item>About</a>
    <a href=# class=nav-item>Portfolio</a>
    <a href=# class=nav-item>Contact</a>
  </ul>
 *
 */
.nav-item {
  display: inline-block;
  padding: 0.9375rem 1.875rem;
  text-decoration: none;
}

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
  <ul class=nav>
    <a href=# class=nav-item nav-item--stacked>Home</a>
    <a href=# class=nav-item nav-item--stacked>About</a>
    <a href=# class=nav-item nav-item--stacked>Portfolio</a>
    <a href=# class=nav-item nav-item--stacked>Contact</a>
  </ul>
 *
 */
.nav-item--stacked {
  display: block;
}

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
  <ul class=nav nav--banner>
    <a href=# class=nav-item nav-item--stacked>Home</a>
    <a href=# class=nav-item nav-item--stacked>About</a>
    <a href=# class=nav-item nav-item--stacked>Portfolio</a>
    <a href=# class=nav-item nav-item--stacked>Contact</a>
  </ul>
 *
 */
.nav--banner {
  text-align: center;
}

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block, .options {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap;
}
.nav--block > li, .options > li {
  letter-spacing: normal;
  word-spacing: normal;
}
.nav--block > li > a, .options > li > a {
  padding: 12px;
}

/*------------------------------------*\
    $OPTIONS
\*------------------------------------*/
/**
 * Link-group nav, used for displaying related options. Extends `.nav--block`
 * but could also extend `.nav--fit`. Extend with colours and ‘current states’
 * in your theme stylesheet.
 *
  <ul class="nav  options">
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
   </ul>
 *
 */
.options > li > a {
  border: 0 solid #ccc;
  /* Extend in your theme stylesheet */
  border-width: 1px;
  border-left-width: 0;
}
.options > li:first-child > a {
  border-left-width: 1px;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.options > li:last-child > a {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 *
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 *
 */
.media {
  display: block;
}

.media__img {
  float: left;
  margin-right: 24px;
}

/**
* Reversed image location (right instead of left).
*/
.media__img--rev {
  float: right;
  margin-left: 24px;
}

.media__img img,
.media__img--rev img {
  display: block;
}

.media__body {
  overflow: hidden;
}

.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}

/**
 * `.img`s in `.islet`s need an appropriately sized margin.
 */
.islet .media__img {
  margin-right: 12px;
}

.islet .media__img--rev {
  margin-left: 12px;
}

/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 *
   <div class=island>
       I am boxed off.
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/u8pV3
 *
 */
.island,
.islet {
  display: block;
}

.island {
  padding: 24px;
}

.island > :last-child,
.islet > :last-child {
  margin-bottom: 0;
}

/**
 * Just like `.island`, only smaller.
 */
.islet {
  padding: 12px;
}

/*------------------------------------*\
    $SPLIT
\*------------------------------------*/
/**
 * Simple split item for creating two elements floated away from one another,
 * e.g.:
 *
   <dl class=split>
       <dt class=split__title>Burger and fries</dt>
       <dd>&pound;5.99</dd>
       <dt class=split__title>Fillet steak</dt>
       <dd>&pound;19.99</dd>
       <dt class=split__title>Ice cream</dt>
       <dd>&pound;2.99</dd>
   </dl>
 *
 */
.split {
  text-align: right;
  list-style: none;
  margin-left: 0;
}

.split__title {
  text-align: left;
  float: left;
  clear: left;
}

/*------------------------------------*\
    $THIS-OR-THIS
\*------------------------------------*/
/**
 * Simple options object to provide multiple choices, e.g.:
 *
   <h1 class=this-or-this>
       <a href=# class="this-or-this__this  two-fifths">
           Free
       </a>
       <span class="this-or-this__or  one-fifth">
           or
       </span>
       <a href=# class="this-or-this__this  two-fifths">
           Pro
       </a>
   </h1>
 *
 * The `.this-or-this__this` and `.this-or-this__or` objects can be sized using
 * the grid-system classes.
 *
 * Demo: jsfiddle.net/inuitcss/R3sks
 *
 */
.this-or-this {
  display: table;
  width: 100%;
  text-align: center;
}

.this-or-this__this,
.this-or-this__or {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $FLYOUT
\*------------------------------------*/
/**
 * Flyouts are pieces of content that fly out of a parent when said parent is
 * hovered. They typically appear bottom-left of the parent.
 *
   <div class=flyout>
       Foo
       <div class=flyout__content>
           <h1>Lorem</h1>
           <p>Ipsum</p>
       </div>
   </div>
 *
 * Extend these objects in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/B52HG
 *
 */
.flyout,
.flyout--alt {
  position: relative;
  overflow: hidden;
}

.flyout__content {
  /**
  * Position the flyouts off-screen. This is typically better than
  * `display:none;`.
  */
  position: absolute;
  top: 100%;
  left: -99999px;
}

/**
* Bring the flyouts into view when you hover their parents.
* Two different types of flyout; ‘regular’ (`.flyout`) and ‘alternative’
* (`.flyout--alt`).
*/
.flyout:hover,
.flyout--alt:hover {
  overflow: visible;
}

/**
* Regular flyouts sit all the way from the top, flush left.
*/
.flyout:hover > .flyout__content {
  left: 0;
}

/**
* Alternative flyouts sit all the way from the left, flush top.
*/
.flyout--alt:hover > .flyout__content {
  top: 0;
  left: 100%;
}

/*------------------------------------*\
    $ARROWS
\*------------------------------------*/
/**
 * It is a common design treatment to give an element a triangular points-out
 * arrow, we typically build these with CSS. These following classes allow us to
 * generate these arbitrarily with a mixin, `@arrow()`.
 */
/**
 * Forms the basis for any/all CSS arrows.
 */
/**
 * Define individual edges so we can combine what we need, when we need.
 */
/*------------------------------------*\
    $SPRITE
\*------------------------------------*/
/**
 * Giving an element a class of `.i` will throw it into ‘icon’.

   <a href=#><i class=i data-icon="&#xF000;"></i> View your favourites</a>
 
 * These all require extension in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/6TKuS
 *
 */
.i {
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: middle;
  zoom: 1;
  /**
  * So using `.i` on certain elements doesn’t make a visual difference.
  */
  font-style: normal;
  font-weight: normal;
  /**
  * So icons added using `.i` sit in the centre of the element.
  */
  text-align: center;
}

/**
 * Set up Batch icon font
 */
.i {
  font-size: 16px;
  /**
  * Place the icon in a box the exact same dimensions as the icon itself.
  */
  width: 1em;
  height: 1em;
}
.i:before {
  content: attr(data-icon);
}

/**
 * Icon size modifiers.
 */
.i--large {
  font-size: 32px;
}

.i--huge {
  font-size: 64px;
}

.i--natural {
  font-size: inherit;
}

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * Basic button structural styling. Extend in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/RqHcp
 *
 */
.btn {
  font: inherit;
  cursor: pointer;
  border: none;
  display: inline-block;
  margin: 0;
  line-height: 1;
  /**
  * Set padding in ems so we can change the size of a button by merely
  * altering its `font-size`.
  */
  padding: 0.5em;
}

.btn,
.btn:hover {
  text-decoration: none;
}

/**
 * Basic button modifiers
 */
.btn--sml {
  font-size: .75em;
}

.btn--lrg {
  font-size: 1.50em;
}

.btn--full {
  display: block;
  text-align: center;
  /**
  * The following is so that `.btn-full` works properly on `input`s as well
  * as `a`s.
  */
  padding-right: 0;
  padding-left: 0;
  width: 100%;
}

/*------------------------------------*\
    $RULES
\*------------------------------------*/
/**
 * Horizontal rules, extend `hr`.
 */
.rule {
  color: #ccc;
  /* Sets border color, extend in your theme stylesheet. */
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin-bottom: 23px;
  margin-bottom: 1.4375rem;
}

/**
 * Dotted rules
 */
.rule--dotted {
  border-bottom-style: dotted;
}

/**
 * Dashed rules
 */
.rule--dashed {
  border-bottom-style: dashed;
}

/*------------------------------------*\
    $STATS
\*------------------------------------*/
 /**
  * Simple object to display key–value statistic-like information, e.g.:
  *
    <div class=stat-group>
        <dl class=stat>
            <dt class=stat__title>Tweets</dt>
            <dd class=stat__value>27,740</dd>
        </dl>

        <dl class=stat>
            <dt class=stat__title>Following</dt>
            <dd class=stat__value>11,529</dd>
        </dl>

        <dl class=stat>
            <dt class=stat__title>Followers</dt>
            <dd class=stat__value>12,105</dd>
        </dl>
    </div>
  *
  * Demo: jsfiddle.net/inuitcss/Bpwu6
  *
  */
.stat-group {
  margin-left: -24px;
}

.stat {
  float: left;
  margin-left: 24px;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: flex;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}

.stat__title {
  -webkit-order: 2;
  -moz-order: 2;
  -ms-order: 2;
  -o-order: 2;
  order: 2;
  -ms-flex-order: 2;
}

.stat__value {
  margin-left: 0;
  -webkit-order: 1;
  -moz-order: 1;
  -ms-order: 1;
  -o-order: 1;
  order: 1;
  -ms-flex-order: 1;
}

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
* Whole
*/
.one-whole {
  width: 100%;
}

/**
* Halves
*/
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%;
}

/**
* Thirds
*/
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%;
}

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%;
}

/**
* Quarters
*/
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%;
}

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%;
}

/**
* Fifths
*/
.one-fifth, .two-tenths {
  width: 20%;
}

.two-fifths, .four-tenths {
  width: 40%;
}

.three-fifths, .six-tenths {
  width: 60%;
}

.four-fifths, .eight-tenths {
  width: 80%;
}

/**
* Sixths
*/
.one-sixth, .two-twelfths {
  width: 16.666%;
}

.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
* Eighths
*/
.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
* Tenths
*/
.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
* Twelfths
*/
.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 480px) {
  /**
  * Whole
  */
  .palm-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .palm-one-half, .palm-two-quarters, .palm-three-sixths, .palm-four-eighths, .palm-five-tenths, .palm-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .palm-one-third, .palm-two-sixths, .palm-four-twelfths {
    width: 33.333%;
  }

  .palm-two-thirds, .palm-four-sixths, .palm-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .palm-one-quarter, .palm-two-eighths, .palm-three-twelfths {
    width: 25%;
  }

  .palm-three-quarters, .palm-six-eighths, .palm-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .palm-one-fifth, .palm-two-tenths {
    width: 20%;
  }

  .palm-two-fifths, .palm-four-tenths {
    width: 40%;
  }

  .palm-three-fifths, .palm-six-tenths {
    width: 60%;
  }

  .palm-four-fifths, .palm-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .palm-one-sixth, .palm-two-twelfths {
    width: 16.666%;
  }

  .palm-five-sixths, .palm-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .palm-one-eighth {
    width: 12.5%;
  }

  .palm-three-eighths {
    width: 37.5%;
  }

  .palm-five-eighths {
    width: 62.5%;
  }

  .palm-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .palm-one-tenth {
    width: 10%;
  }

  .palm-three-tenths {
    width: 30%;
  }

  .palm-seven-tenths {
    width: 70%;
  }

  .palm-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .palm-one-twelfth {
    width: 8.333%;
  }

  .palm-five-twelfths {
    width: 41.666%;
  }

  .palm-seven-twelfths {
    width: 58.333%;
  }

  .palm-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
  * Whole
  */
  .lap-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .lap-one-half, .lap-two-quarters, .lap-three-sixths, .lap-four-eighths, .lap-five-tenths, .lap-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .lap-one-third, .lap-two-sixths, .lap-four-twelfths {
    width: 33.333%;
  }

  .lap-two-thirds, .lap-four-sixths, .lap-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .lap-one-quarter, .lap-two-eighths, .lap-three-twelfths {
    width: 25%;
  }

  .lap-three-quarters, .lap-six-eighths, .lap-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .lap-one-fifth, .lap-two-tenths {
    width: 20%;
  }

  .lap-two-fifths, .lap-four-tenths {
    width: 40%;
  }

  .lap-three-fifths, .lap-six-tenths {
    width: 60%;
  }

  .lap-four-fifths, .lap-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .lap-one-sixth, .lap-two-twelfths {
    width: 16.666%;
  }

  .lap-five-sixths, .lap-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .lap-one-eighth {
    width: 12.5%;
  }

  .lap-three-eighths {
    width: 37.5%;
  }

  .lap-five-eighths {
    width: 62.5%;
  }

  .lap-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .lap-one-tenth {
    width: 10%;
  }

  .lap-three-tenths {
    width: 30%;
  }

  .lap-seven-tenths {
    width: 70%;
  }

  .lap-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .lap-one-twelfth {
    width: 8.333%;
  }

  .lap-five-twelfths {
    width: 41.666%;
  }

  .lap-seven-twelfths {
    width: 58.333%;
  }

  .lap-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (max-width: 1023px) {
  /**
  * Whole
  */
  .portable-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .portable-one-half, .portable-two-quarters, .portable-three-sixths, .portable-four-eighths, .portable-five-tenths, .portable-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .portable-one-third, .portable-two-sixths, .portable-four-twelfths {
    width: 33.333%;
  }

  .portable-two-thirds, .portable-four-sixths, .portable-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .portable-one-quarter, .portable-two-eighths, .portable-three-twelfths {
    width: 25%;
  }

  .portable-three-quarters, .portable-six-eighths, .portable-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .portable-one-fifth, .portable-two-tenths {
    width: 20%;
  }

  .portable-two-fifths, .portable-four-tenths {
    width: 40%;
  }

  .portable-three-fifths, .portable-six-tenths {
    width: 60%;
  }

  .portable-four-fifths, .portable-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .portable-one-sixth, .portable-two-twelfths {
    width: 16.666%;
  }

  .portable-five-sixths, .portable-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .portable-one-eighth {
    width: 12.5%;
  }

  .portable-three-eighths {
    width: 37.5%;
  }

  .portable-five-eighths {
    width: 62.5%;
  }

  .portable-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .portable-one-tenth {
    width: 10%;
  }

  .portable-three-tenths {
    width: 30%;
  }

  .portable-seven-tenths {
    width: 70%;
  }

  .portable-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .portable-one-twelfth {
    width: 8.333%;
  }

  .portable-five-twelfths {
    width: 41.666%;
  }

  .portable-seven-twelfths {
    width: 58.333%;
  }

  .portable-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 1024px) {
  /**
  * Whole
  */
  .desk-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .desk-one-half, .desk-two-quarters, .desk-three-sixths, .desk-four-eighths, .desk-five-tenths, .desk-six-twelfths {
    width: 50%;
  }

  /**
  * Thirds
  */
  .desk-one-third, .desk-two-sixths, .desk-four-twelfths {
    width: 33.333%;
  }

  .desk-two-thirds, .desk-four-sixths, .desk-eight-twelfths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .desk-one-quarter, .desk-two-eighths, .desk-three-twelfths {
    width: 25%;
  }

  .desk-three-quarters, .desk-six-eighths, .desk-nine-twelfths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .desk-one-fifth, .desk-two-tenths {
    width: 20%;
  }

  .desk-two-fifths, .desk-four-tenths {
    width: 40%;
  }

  .desk-three-fifths, .desk-six-tenths {
    width: 60%;
  }

  .desk-four-fifths, .desk-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .desk-one-sixth, .desk-two-twelfths {
    width: 16.666%;
  }

  .desk-five-sixths, .desk-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .desk-one-eighth {
    width: 12.5%;
  }

  .desk-three-eighths {
    width: 37.5%;
  }

  .desk-five-eighths {
    width: 62.5%;
  }

  .desk-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .desk-one-tenth {
    width: 10%;
  }

  .desk-three-tenths {
    width: 30%;
  }

  .desk-seven-tenths {
    width: 70%;
  }

  .desk-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .desk-one-twelfth {
    width: 8.333%;
  }

  .desk-five-twelfths {
    width: 41.666%;
  }

  .desk-seven-twelfths {
    width: 58.333%;
  }

  .desk-eleven-twelfths {
    width: 91.666%;
  }
}
/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
.float--right {
  float: right!important;
}

.float--left {
  float: left !important;
}

.text--left {
  text-align: left  !important;
}

.text--center {
  text-align: center!important;
}

.text--right {
  text-align: right !important;
}

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -24px !important;
  margin-left: -24px !important;
}
.islet .full-bleed {
  margin-right: -12px !important;
  margin-left: -12px !important;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help;
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase;
}

/**
 * Hide content off-screen without resorting to `display:none;`
 */
.accessibility {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/**
 * Hide content based on breakpoint
 */
.hide {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@media only screen and (max-width: 480px) {
  .hide--palm {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  .hide--lap {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
@media only screen and (min-width: 481px) {
  .hide--lap-and-up {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
@media only screen and (max-width: 1023px) {
  .hide--portable {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
@media only screen and (min-width: 1024px) {
  .hide--desk {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
@media only screen and (min-width: 1200px) {
  .hide--desk-wide {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  }
}
